//Copyright 2012, etc.

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD.
        define(['jquery', 'underscore'], factory);
    } else {
        // Browser globals
        root.principium = factory(root.$, root._);
    }
}(this, function ($, _) {



define('principium/convert',['underscore'], function (_) {
    'use strict';

    function convert(text) {
        return _.escape(text);
    }

    return convert;
});
/*global define */

/**
 * The main module that defines the public interface for principium,
 * a made-up library to demonstrate how to construct a source from components.
 */
define('principium/2nd',['require'],function (require) {
   
    return 'this is the testing ground';

});

/*global define */

/**
 * The main module that defines the public interface for principium,
 * a made-up library to demonstrate how to construct a source from components.
 */
define('principium',['require','jquery','principium/convert','principium/2nd'],function (require) {
    'use strict';

    var $ = require('jquery'),
        convert = require('principium/convert');
        convert = require('principium/2nd');

    //Return the module value.
    return {
        version: '0.0.1, jQuery version is: ' + $.fn.jquery,
        convert: convert
    };
});
    //Register in the values from the outer closure for common dependencies
    //as local almond modules
    define('jquery', function () {
        return $;
    });
    define('underscore', function () {
        return _;
    });

    //Use almond's special top-level, synchronous require to trigger factory
    //functions, get the final module value, and export it as the public
    //value.
    return require('principium');
}));
